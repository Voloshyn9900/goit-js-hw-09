{"mappings":"AA8CgB,IAAIA,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAaC,KAAKC,SAAW,GAEnCC,YAAW,WACLH,GACFF,EAAQ,kEAGiCC,EAApC,mD,GACN,I,IAaFK,MAYsB,SAAJC,GACnBC,QAAQC,IAAI,8BACZD,QAAQC,IAAI,KAAcC,OAAPH,G,IAblBD,MAAK,SAAAK,GAEJ,MADAH,QAAQC,IAAIE,GACN,IAAIC,MAAM,oB,IAGjBN,MAAK,SAAAO,GACJL,QAAQC,IAAII,E,IAEbC,OAAM,SAAAC,G,OAASP,QAAQC,IAAIM,E,IAC3BC,SAAQ,WAAKR,QAAQC,IAAK,iC","sources":["src/js/07-promise-api.js"],"sourcesContent":["/*\n * Создание промиса\n *  - Класс Promise\n *  - resolve\n *  - reject\n *  - Promise.prototype.then(onResolve, onReject)\n */\n\n// let data = \"тут еще ничего нет\";\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n//     }\n\n//     reject('Промис выполнился с ошибкой (отклонён, rejected)');\n//   }, 1000);\n// });\n\n// console.log(data);\n\n// promise.then(onFulfilled, onRejected);\n\n// console.log(data);\n\n// function onFulfilled(result) {\n//   console.log('onFulfilled -> onFulfilled');\n//   console.log(`✅ ${result}`);\n// }\n\n// function onRejected(error) {\n//   console.log('onRejected -> onRejected');\n//   console.log(`❌ ${error}`);\n// }\n\n//////////////////////////////////////////\n\n/*\n * Цепочки промисов (chaining)\n * Promise.prototype.catch(error)\n * Promise.prototype.finally()\n */\n\nconst promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n\n  setTimeout(() => {\n    if (canFulfill) {\n      resolve('Промис выполнился успешно, с результатом (исполнен, fulfilled)');\n    }\n\n    reject('Промис выполнился с ошибкой (отклонён, rejected)');\n  }, 1000);\n});\n\n// promise\n//   .then(onFulfilled, onRejected)\n//   .then(x => {\n//     console.log(x)\n//     throw new Error('ошибка во 2м then');\n//     return 10;\n//   }, error => { console.log(error) })\n//   .then(x => { console.log(x) }, error => {console.log(error)});\n\npromise\n  .then(onFulfilled)\n  .then(x => {\n    console.log(x);\n    throw new Error('ошибка во 2м then');\n    return 10;\n  })\n  .then(y => {\n    console.log(y);\n  })\n  .catch(error => console.log(error))\n  .finally(()=>{console.log(`Я буду выполнен в любом случае`);});\n\nfunction onFulfilled(result) {\n  console.log('onFulfilled -> onFulfilled');\n  console.log(`✅ ${result}`);\n}\n\nfunction onRejected(error) {\n  console.log('onRejected -> onRejected');\n  console.log(`❌ ${error}`);\n}\n\n//////////////////////////////////////////\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFulfill = Math.random() > 0.5;\n//   setTimeout(() => {\n//     if (canFulfill) {\n//       resolve('Промис выполнился успешно с результатом (исполнен, Fulfilled)');\n//     }\n//     reject('Промис выполнился с ошибкой (отклонен, Reject)');\n//   }, 3000);\n// });\n\n// console.log(promise);\n\n// promise.then(\n//   result => {\n//   console.log(result);\n//   },\n//   error => {\n//   console.log(error);\n// })\n"],"names":["Promise","resolve","reject","canFulfill","Math","random","setTimeout","then","result","console","log","concat","x","Error","y","catch","error","finally"],"version":3,"file":"07-promise-api.f4d44965.js.map"}