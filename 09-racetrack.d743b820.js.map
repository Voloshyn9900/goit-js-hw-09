{"mappings":"AA2DA,MAAMA,EAAS,CACb,cACA,UACA,kBACA,aACA,cAGF,IAAIC,EAAc,EAClB,MAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAiBpC,SAASI,EAAIC,GACX,OAAO,IAAIC,SAAQC,IACjB,MAAMC,GAgCaC,EAhCQ,IAgCHC,EAhCS,KAiC5BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtD,IAAuBA,EAAKC,EA/BxBI,YAAW,KACTP,EAAQ,C,MAAEF,E,KAAOG,GAAO,GACvBA,EAAK,G,CAiBZ,SAASO,EAAkBC,GACzBnB,EAAKI,YAAYgB,YAAcD,C,CAEjC,SAASE,EAAoBF,GAC3BnB,EAAKK,cAAce,YAAcD,C,CAxCnCnB,EAAKC,SAASqB,iBAAiB,SAE/B,WACE,MAAMC,EAAWzB,EAAO0B,IAAIjB,GAC5BkB,QAAQC,IAAIH,GACZL,EAAkB,MACfG,EAAiB,4CAiBGM,EAfPJ,EAgBhBd,QAAQmB,KAAKD,GAASE,MAAK,EAACrB,MAAEA,EAAKG,KAAEA,MACnCO,EAAkB,cAACV,qBAA4BG,aAkBnD,UAA2BH,MAAEA,EAAKG,KAAEA,EAAMmB,YAAAC,IACxC,MAAMC,EAAK,WAAWD,aAAuBvB,aAAiBG,aAC9DX,EAAKM,UAAU2B,mBAAmB,YAAaD,E,CAnBfE,CAAZ,C,MAAE1B,E,KAAOG,E,YAAMZ,GAAc,IAInD,SAAoB4B,GAClBlB,QAAQ0B,IAAIR,GAASE,MAAK,KACxBR,EAAoB,wCAAuC,G,CAvB7De,CAAWb,GAEXxB,IAYF,IAAyB4B,C","sources":["src/js/09-racetrack.js"],"sourcesContent":["import '../css/common.css';\n\n// const horses = [\n//   'Secretariat',\n//   'Eclipse',\n//   'West Australian',\n//   'Flying Fox',\n//   'Seabiscuit',\n// ];\n\n// const promises = horses.map(run); Cutter\n\n// const promises = horses.map(horse => run(horse));\n// console.log(promises);\n\n// // setTimeout(() => {\n// //   console.log(promises);\n// // }, 4000);\n\n// // /*\n// //  * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞\n// //  */\n\n// Promise.race(promises).then(({ horse, time }) => {\n//   console.log(\n//     `%c üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time} –≤—Ä–µ–º–µ–Ω–∏`,\n//     \"color: green; font-size: 14px\");\n// });\n\n// // /*\n// //  * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤\n// //  */\n\n// Promise.all(promises).then((horse) => {\n//   console.log(horse);\n//   console.log('üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.');\n// });\n\n// function run(horse) {\n//   return new Promise((resolve) => {\n//     const time = getRandomTime(2000, 3500);\n//     setTimeout(() => {\n//       resolve({ horse, time });\n//     }, time);\n\n//   })\n// }\n\n// console.log('ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');\n// // run(\"Avrora\")\n// //   .then(x => console.log(x))\n// //   .catch(e => console.log(e));\n\n// function getRandomTime(min, max) {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// }\n\n//////////////////////////////////////////////\n\nconst horses = [\n  'Secretariat',\n  'Eclipse',\n  'West Australian',\n  'Flying Fox',\n  'Seabiscuit',\n];\n\nlet raceCounter = 0;\nconst refs = {\n  startBtn: document.querySelector('.js-start-race'),\n  winnerField: document.querySelector('.js-winner'),\n  progressField: document.querySelector('.js-progress'),\n  tableBody: document.querySelector('.js-results-table > tbody'),\n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() {\n  const promises = horses.map(run);\n  console.log(promises);\n  updateWinnerField(`üéâ`);\n  updateProgressField('ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');\n\n  determineWinner(promises);\n  waitForAll(promises);\n\n  raceCounter++;\n}\n\nfunction run(horse) {\n  return new Promise(resolve => {\n    const time = getRandomTime(2000, 3500);\n    setTimeout(() => {\n      resolve({ horse, time });\n    }, time);\n  });\n}\n\nfunction determineWinner(horsesP) {\n  Promise.race(horsesP).then(({ horse, time }) => {\n    updateWinnerField(`üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time} –≤—Ä–µ–º–µ–Ω–∏`);\n    updateResultTable({ horse, time, raceCounter });\n  });\n}\n\nfunction waitForAll(horsesP) {\n  Promise.all(horsesP).then(() => {\n    updateProgressField('üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.');\n  });\n}\n\nfunction updateWinnerField(message) {\n  refs.winnerField.textContent = message;\n}\nfunction updateProgressField(message) {\n  refs.progressField.textContent = message;\n}\n\nfunction updateResultTable({ horse, time, raceCounter }) {\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td><tr>`;\n  refs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n\nfunction getRandomTime(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"],"names":["$8c2d72a5899d11d7$var$horses","$8c2d72a5899d11d7$var$raceCounter","$8c2d72a5899d11d7$var$refs","startBtn","document","querySelector","winnerField","progressField","tableBody","$8c2d72a5899d11d7$var$run","horse","Promise","resolve","time","min","max","Math","floor","random","setTimeout","$8c2d72a5899d11d7$var$updateWinnerField","message","textContent","$8c2d72a5899d11d7$var$updateProgressField","addEventListener","promises","map","console","log","horsesP","race","then","raceCounter","raceCounter1","tr","insertAdjacentHTML","$8c2d72a5899d11d7$var$updateResultTable","all","$8c2d72a5899d11d7$var$waitForAll"],"version":3,"file":"09-racetrack.d743b820.js.map"}