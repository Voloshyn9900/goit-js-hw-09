{"mappings":"iMA2BA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQM,QAAQC,IAAK,eAErBN,EAAOK,QAAQC,IAAK,a,GAErBC,Q,mTArCPC,EAAA,SAEeC,SAASC,cAAc,SAE/BC,iBAAiB,UAGxB,SAAsBC,GACpBA,EAAEC,iBAEF,IAAIjB,EAAW,EAGTkB,GAFMC,SAASH,EAAEI,cAAcnB,MAAMoB,OAC9BF,SAASH,EAAEI,cAAcE,KAAKD,OAC5BF,SAASH,EAAEI,cAAcF,OAAOG,QAE/C,KAAerB,GAAYkB,EAAQlB,IACjCD,EAAcC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector(\".form\");\n\nformEl.addEventListener('submit', handleSubmit);\n\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  let position = 1;\n  let delay = parseInt(e.currentTarget.delay.value);\n  const step = parseInt(e.currentTarget.step.value);\n  const amount = parseInt(e.currentTarget.amount.value);\n\n  for (position; position <= amount; position++) {\n    createPromise(position);\n    \n\n\n  }\n\n\n}\n\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(console.log(`// Fulfill`));\n      } else {\n        reject(console.log(`// Reject`));\n      }\n    }, timeout);\n\n  })\n\n}"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","timeout","parcelRequire","document","querySelector","addEventListener","e","preventDefault","amount","parseInt","currentTarget","value","step"],"version":3,"file":"03-promises.86887d9c.js.map"}